internal class Program
{
    private static void Main(string[] args)
    {
        Seller seller = new Seller();
        Player player = new Player(200);
        Store store = new Store(seller, player);
        store.ShowMenu();
    }
}

class Store
{
    private Seller _seller;
    private Player _player;

    public Store(Seller seller, Player player)
    {
        _seller = seller;
        _player = player;
    }

    private bool Trade()
    {
        _seller.ShowItems();

        Console.WriteLine("Введите название товара, который хотите приобрести: ");
        string productName = Console.ReadLine();

        Product productToBuy;

        if (_seller.FindProduct(productName, out productToBuy))
        {
            if (_player.CanBuy(productToBuy.Price))
            {
                _player.PayForProduct(productToBuy);
                _seller.SellProduct(productToBuy);
                Console.WriteLine($"Вы приобрели товар - {productToBuy.Name}");
                return true;
            }
            else
            {
                Console.WriteLine("Не удалось купить товар, недостаточно средств.");
                return false;
            }
        }

        Console.WriteLine("Товар не найден!");
        return false;

    }

    public void ShowMenu()
    {
        const string CommandShowAllProducts = "1";
        const string CommandBuyProducts = "2";
        const string CommandShowAllProductsPlayer = "3";
        const string CommandExit = "4";

        bool isPlaying = true;

        while (isPlaying)
        {
            Console.WriteLine("Добро пожаловать в магазин!");
            _seller.ShowMoney();
            Console.WriteLine("У меня есть список товаров которые ты можешь приобрести.");
            Console.WriteLine($"Выберите действие: ");
            Console.WriteLine($"{CommandShowAllProducts} - Показать список товаров у продавца.");
            Console.WriteLine($"{CommandBuyProducts} - Купить товар.");
            Console.WriteLine($"{CommandShowAllProductsPlayer} - Показать список товаров у игрока.");
            Console.WriteLine($"{CommandExit} - Выйти из магазина.");
            Console.Write($"Игрок - ");
            _player.ShowMoney();
            string userInput = Console.ReadLine();

            switch (userInput)
            {
                case CommandShowAllProducts:
                    _seller.ShowItems();
                    break;

                case CommandBuyProducts:
                    Trade();
                    break;

                case CommandShowAllProductsPlayer:
                    _player.ShowItems();
                    break;

                case CommandExit:
                    isPlaying = false;
                    break;

                default:
                    Console.WriteLine("Такого действия нет.");
                    break;
            }

            Console.WriteLine("Нажмите любую кнопку для продолжения.");
            Console.ReadKey();
            Console.Clear();
        }
    }
}

public abstract class MarketAgent
{
    protected int Money;
    protected List<Product> Items = new List<Product>();

    public MarketAgent (int initialMoney)
    {
        Money = initialMoney;
    }

    public void ShowItems()
    {
        Console.WriteLine("Список товаров: ");

        foreach (var item in Items)
        {
            item.ShowInfo();
        }
    }

    public void ShowMoney()
    {
        Console.WriteLine($"Баланс средств: {Money} ед. золота.");
    }
}

public class Seller : MarketAgent
{
    public Seller() : base(0)
    {
        CreateProducts();
    }

    public bool FindProduct(string productName, out Product product)
    {
        foreach (Product item in Items)
        {
            if(item.Name.Equals(productName, StringComparison.OrdinalIgnoreCase))
            {
                product = item;
                return true;
            }
        }

        product = null;
        Console.WriteLine("Данного товара нет в магазине");
        return false;
    }

    public void SellProduct(Product product)
    {
        Money += product.Price;
        Items.Remove(product);
    }
    
    private void CreateProducts()
    {
        Items.Clear();

        string[] nameProducts = { "Меч", "Броня", "Перчатки", "Ботинки", "Штаны", "Шляпа" };
        int[] pricesProducts = { 85, 100, 25, 25, 50, 20 };

        for (int i = 0; i < nameProducts.Length; i++)
        {
            Items.Add(new Product(nameProducts[i], pricesProducts[i]));
        }
    }
}

public class Player : MarketAgent
{
    public Player(int initialMoney) : base (initialMoney) { }

    public void PayForProduct(Product product)
    {
        Money -= product.Price;
        Items.Add(product);
    }

    public bool CanBuy(int productPrice)
    {
        return Money >= productPrice;
    }
}

public class Product
{
    public Product(string name, int price)
    {
        Name = name;
        Price = price;
    }

    public string Name { get; private set; }
    public int Price { get; private set; }

    public void ShowInfo()
    {
        Console.WriteLine($"{Name} по цене {Price} ед. золота.");
    }
}
